openapi: 3.0.3
info:
  title: Swagger AREA
  description: |-
    The goal of this project is to discover, as a whole, the software platform that you have chosen through the creation of a business application.  
    To do this, you must implement a software suite that functions similar to that of IFTTT and/or Zapier.
  version: 1.2.0
externalDocs:
  description: Link to Github Repository
  url: https://github.com/EpitechPromo2026/B-DEV-500-LYN-5-1-area-timothe.medico
servers:
  - url: http://area.baragouin.fr/api/
tags:
  - name: Authentication
    description: Access to application
  - name: User
    description: User related informations
  - name: Service
    description: Usable services
  - name: AREA
    description: Configure actions/reactions
  - name: Configuration
    description: Schedulated tasks


paths:
  /auth/register:
    post:
      tags:
        - Authentication
      summary: Register a new user
      description: Register a new user
      operationId: registerUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '201':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '400':
          description: Invalid request body
        '403':
          description: Email already used

  /auth/login:
    post:
      tags:
        - Authentication
      summary: Login a user
      description: Multiple status values can be provided with comma separated strings
      operationId: loginUser
      requestBody:
        description: Update an existent pet in the store
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/Credentials'
        required: true
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Token'
        '400':
          description: Invalid request body
        '401':
          description: Invalid email/password combination

  /auth/logout:
    post:
      tags:
        - Authentication
      summary: Logout user
      description: Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.
      operationId: logoutUser
      responses:
        '200':
          description: Successful operation
        '401':
          description: Must be logged

  /me:
    get:
      tags:
        - User
      summary: Find user information
      description: Returns a single pet
      operationId: getLoggedUser
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/User'
        '401':
          description: Must be logged
  /me/resetPassword:
    post:
      tags:
        - User
      summary: Reset user password
      description: Returns a single pet
      operationId: resetUserPassword
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Password'
        '401':
          description: Must be logged

  /services:
    get:
      tags:
        - Service
      summary: List services
      description: ''
      operationId: uploadFile
      parameters:
        - name: petId
          in: path
          description: ID of pet to update
          required: true
          schema:
            type: integer
            format: int64
        - name: additionalMetadata
          in: query
          description: Additional Metadata
          required: false
          schema:
            type: string
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Service'


  /areas:
    get:
      tags:
        - AREA
      summary: List actions/reactions
      description: Returns a map of status codes to quantities
      operationId: getInventory
      responses:
        '200':
          description: Successful operation
          content:
            application/json:
              schema:
                type: object
                additionalProperties:
                  type: integer
                  format: int32


components:
  schemas:
    User:
      required:
        - first_name
        - last_name
        - email
        - register_date
      type: object
      properties:
        first_name:
          type: string
          example: 'John'
        last_name:
          type: string
          example: 'Doe'
        email:
          type: string
          example: john.doe@gmail.com
        register_date:
          type: string
          format: date-time
          example: '2023-08-25T17:32:28Z'
    Token:
      required:
        - token
      type: object
      properties:
        token:
          type: string
          example: eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJ1c2VyIjp
    Password:
      required:
        - password
      type: object
      properties:
        password:
          type: string
          example: N3wG3n3r@t3dP@$$w0rd
    Credentials:
      required:
        - email
        - password
      type: object
      properties:
        email:
          type: string
          example: 'john.doe@gmail.com'
        password:
          type: string
          format: password
          example: 'password1234'
          description: 'Password must be longer than 10 characters'
    Service:
      type: object
      properties:
        name:
          type: string
          example: 'Microsoft Teams'
        enable:
          type: boolean
          example: true
